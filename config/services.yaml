parameters:
    locale: 'en'

services:
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{Entity,Migrations,Tests,Kernel.php,lib.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\DataCollector\PerformanceCollector:
        tags:
            -
                name:     data_collector
                template: 'data_collector/performance_collector.html.twig'
                id:       'app.performance_collector'

    app.no_validation_form_extension:
        class: App\Form\Extension\NoValidateExtension
        tags:
            - {name: form.type_extension, alias: form, extended_type: Symfony\Component\Form\Extension\Core\Type\FormType}

    App\Parameter\Environment\AppEnv:
        arguments:
            $appEnv: '%env(APP_ENV)%'

    App\Security\TestAuthenticator:
        arguments:
            $appEnv: '@App\Parameter\Environment\AppEnv'

    App\Service\AuthChecker:
        arguments:
            $authorizationChecker: '@security.authorization_checker'

    Symfony\Component\Security\Core\Authorization\AuthorizationCheckerInterface: '@App\Service\AuthChecker'

    App\Parameter\Environment\AppName:
        arguments:
            $appName: '%env(APP_NAME)%'

    App\Twig\AppExtension:
        arguments:
            $javascriptParametersContainer: '@App\Parameter\Container\JavascriptParametersContainer'
            $appName: '@App\Parameter\Environment\AppName'

    App\Security\Annotation\IsGrantedListener:
        arguments:
            $argumentNameConverter: '@framework_extra_bundle.argument_name_convertor'

    Monolog\Formatter\JsonFormatter: ~

    App\Utils\PerformanceMeter:
        arguments:
            $appEnv: '@App\Parameter\Environment\AppEnv'

    App\Attempt\Profile\ProfileNormalizerInterface: '@App\Form\ProfileType'

    App\Security\User\CurrentUserProviderInterface:
        class: App\Service\UserLoader
        public: true

    App\Parameter\Container\ParametersContainerInterface:
        class: 'App\Parameter\Container\JavascriptParametersContainer'
        public: true

    App\Attempt\Doctrine\UserAttemptsExtension:
        tags:
            - { name: api_platform.doctrine.orm.query_extension.collection, priority: 9 }

    App\Serializer\Normalizer\DataTablesNormalizer:
        arguments:
            $collectionExtensions: !tagged api_platform.doctrine.orm.query_extension.collection
            $collectionFilters: !tagged api_platform.filter

    App\DataTables\Doctrine\PaginationExtension:
        tags:
            - { name: api_platform.doctrine.orm.query_extension.collection, priority: 9 }

    App\Request\Pagination\PaginationRequestType:
        arguments:
            $apiRequestHandler: '@App\Request\ApiRequestHandler'

    App\Request\DataTables\DataTablesRequestType:
        arguments:
            $apiRequestHandler: '@App\Request\ApiRequestHandler'

    App\Security\User\CurrentUserUpdatesUsernameSubscriber:
        factory: 'App\Security\User\CurrentUserUpdatesUsernameSubscriber::factory'
        tags:
            - { name: doctrine.event_subscriber, connection: default }


    App\Serializer\Encoder\JsonDatatablesEncoder:
        arguments:
            $applicationEnvironment: '@App\Parameter\Environment\AppEnv'


    App\Attempt\AttemptResponseFactoryInterface:
        class: 'App\Repository\AttemptRepository'
        public: true

    App\Attempt\AttemptProviderInterface:
        class: 'App\Repository\AttemptRepository'
        public: true

    App\Attempt\Example\EventSubscriber\ShowExamplesCollectionSubscriber:
        arguments:
            $userNumberProvider: '@App\Attempt\Example\Number\UserNumberProvider'